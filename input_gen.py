import random

def gen_math_term(num_results=50, min_operations=1, max_operations=10):
    """ HERE BE DRAGONS!!!!

    :param num_results: number of generated terms
    :param min_operations: minimum number of operations per term
    :param max_operations: maximum number of operations per term
    :return: math term as list of tokens
    """
    result_terms = []

    while num_results >= 0:
        num_ops = random.randint(min_operations, max_operations)

        term = ['('] + gen_opt() + [')']
        num_ops -= 1

        while num_ops > 0:
            if random.randint(0,1):
                term = ['('] + gen_opt(full=False) + term + [')']
            else:
                term = ['('] + term + gen_opt(full=False, left=False) + [')']
            num_ops -= 1

        result_terms.append(term)
        num_results -= 1

    return result_terms

def gen_opt(full=True, left=True):
    operations = ['+', '-', '*', '/']

    if full:
        return [str(random.randint(1, 9)), operations[random.randint(0, 3)], str(random.randint(1, 9))]
    else:
        if left:
            return [str(random.randint(1, 9)), operations[random.randint(0, 3)]]
        else:
            return [operations[random.randint(0, 3)], str(random.randint(1, 9))]

def get_bracket(chance):
    """ Should we add brackets?

    :param chance: Chance to generate a bracket: 0.0 < chance < 1.0
    :return: True if bracket, False if not
    """
    rnd = random.randint(0,100)
    if rnd >=0 and rnd <= chance*100:
        return True
    else:
        return False

def translate_to_nl(tokens):
    """ Translates token list to string list

    :param tokens: list of tokens as generated by gen_math_term()
    :return: list of string tokens, brackets are stripped
    """
    d = {
        '1': 'one',
        '2': 'two',
        '3': 'three',
        '4': 'four',
        '5': 'five',
        '6': 'six',
        '7': 'seven',
        '8': 'eight',
        '9': 'nine',
        '+': 'plus',
        '-': 'minus',
        '*': 'times',
        '/': 'divide'
    }
    return [d.get(x, None) for x in tokens if not x in ['(',')']]

def gen_corpus(num_results, min_operations, max_operations):
    input = gen_math_term(num_results=num_results, min_operations=min_operations, max_operations=max_operations)

    result = []
    for i in input:
        # generate our desired input data string (replacing some whitespaces around ( and )
        result.append("\"{}\": {}".format(" ".join(translate_to_nl(i)), " ".join(i).replace("( ", "(").replace(" )", ")")))

    return result
